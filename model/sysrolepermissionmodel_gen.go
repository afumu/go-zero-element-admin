// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRolePermissionFieldNames          = builder.RawFieldNames(&SysRolePermission{})
	sysRolePermissionRows                = strings.Join(sysRolePermissionFieldNames, ",")
	sysRolePermissionRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRolePermissionFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	sysRolePermissionRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRolePermissionFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	sysRolePermissionModel interface {
		Insert(ctx context.Context, data *SysRolePermission) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRolePermission, error)
		Update(ctx context.Context, data *SysRolePermission) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysRolePermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysRolePermission struct {
		Id          int64         `db:"id"`           // 标识
		RoleId      sql.NullInt64 `db:"role_id"`      // 角色标识
		PermissonId sql.NullInt64 `db:"permisson_id"` // 权限标识
		CreatedBy   sql.NullInt64 `db:"created_by"`   // 创建人
		CreatedTime sql.NullTime  `db:"created_time"` // 创建时间
		UpdatedBy   sql.NullInt64 `db:"updated_by"`   // 更新人
		UpdatedTime sql.NullTime  `db:"updated_time"` // 更新时间
	}
)

func newSysRolePermissionModel(conn sqlx.SqlConn) *defaultSysRolePermissionModel {
	return &defaultSysRolePermissionModel{
		conn:  conn,
		table: "`sys_role_permission`",
	}
}

func (m *defaultSysRolePermissionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysRolePermissionModel) FindOne(ctx context.Context, id int64) (*SysRolePermission, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRolePermissionRows, m.table)
	var resp SysRolePermission
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRolePermissionModel) Insert(ctx context.Context, data *SysRolePermission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysRolePermissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.PermissonId, data.CreatedBy, data.CreatedTime, data.UpdatedBy, data.UpdatedTime)
	return ret, err
}

func (m *defaultSysRolePermissionModel) Update(ctx context.Context, data *SysRolePermission) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRolePermissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RoleId, data.PermissonId, data.CreatedBy, data.CreatedTime, data.UpdatedBy, data.UpdatedTime, data.Id)
	return err
}

func (m *defaultSysRolePermissionModel) tableName() string {
	return m.table
}
